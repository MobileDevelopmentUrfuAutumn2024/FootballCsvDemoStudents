import parser.CsvParser
import resolver.Resolver

fun main() {
    val players = CsvParser.parse("src/main/resources/fakePlayers.csv")
    val resolver = Resolver(players)

    println("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∞–≥–µ–Ω—Å—Ç–≤–∞: ${resolver.getCountWithoutAgency()}")

    if (resolver.getBestScorerDefender().isNotEmpty()) {
        val maxGoals = resolver.getBestScorerDefender().first().second
        println("\nüèÜ –õ—É—á—à–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ–≤ ($maxGoals –≥–æ–ª–æ–≤):")
        resolver.getBestScorerDefender().forEach { (name, _) ->
            println("   - $name")
        }
    } else {
        println("\n‚ùó –ù–µ—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    }

    println("\nüîù –ü–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ –Ω–µ–º–µ—Ü–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${resolver.getTheExpensiveGermanPlayerPosition()}")

    println()

    println("üèÖ –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —É–¥–∞–ª–µ–Ω–∏–π –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${resolver.getTheRudestTeam().name}")

    generateCountryDistributionChart(players)
}
